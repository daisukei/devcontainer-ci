name: 'DevContainer CI' 
on: 
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout (GitHub)
        uses: actions/checkout@v3

#      - name: Build and run dev container task
#        uses: devcontainers/ci@v0.3
#        id: simpletest
#        with:
#          imageName: ghcr.io/daisukei/example-devcontainer
#          subFolder: '.'
#          runCmd: sudo chmod 777 . || pytest --doctest-modules --junitxml=junit/test-results.xml --cov=./devcontainer-ci --cov-report=xml --cov-report=html || pwd || ls -alh
          #runCmd: sudo chmod 644 . || echo "Hello, World!" > sample.

      - name: runner - List all files and folders
        run: |
          sudo chmod g+w ./env
          mkdir .pytest_cache
          chmod g+w .pytest_cache
          ls -alh

      - name: Install Devcontainer CLI
        run: |
          npm install -g @devcontainers/cli
          devcontainer --version
          printenv

      - name: Run Pytest in Devcontainer
        run: |
          devcontainer up --workspace-folder ./env
          devcontainer exec --workspace-folder ./env pytest ../src/tests --cov=../src -v --cov-report=xml --cov-report=html
        #devcontainer exec --workspace-folder ./env pytest ../src/tests --doctest-modules --junitxml=junit/test-results.xml --cov=../src --cov-report=xml --cov-report=html

      - name: runner - List all files and folders
        run: |
          ls -l .pytest_cache
          ls -alh 
          
#      - name: mnt/output - List all files and folders
#        run: ls -alh /mnt/github/output
        
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: ./env/junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Upload pytest test results(HTML)
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: ./env/htmlcov
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

#      - name: Get Cover 
#        uses: orgoro/coverage@v3.1
#        with:
#          coverageFile: ./env/coverage.xml
#          token: ${{ secrets.GH_PAT }}

#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v2 
 #       with:
 #         registry: ghcr.io
 #         username: ${{ github.actor }}
 #         password: ${{ secrets.GH_PAT }}

      - name: Log in to GitHub Packages Docker registry
        run: docker login ghcr.io -u ${{ github.actor }} --password ${{ secrets.GH_PAT }}

      - name: Build and push Devcontainer Image
        run: |
          devcontainer build --workspace-folder ./env --image-name daisukei-devcontainer-image:1.0
          ls -alh 
     # devcontainer build --workspace-folder ./env --push true --image-name ghcr.io/daisukei/example-devcontainer-image

      - name: Run Trivy vulnerability Image scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'daisukei-devcontainer-image:1.0'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
  
      - name: Upload Trivy Image scan result
        uses: actions/upload-artifact@v3
        with:
          name: trivy scan result
          path: trivy-image-results.sarif

      - name: Trivy Image Alert
        run: |
          if grep -e CRITICAL trivy-image-results.sarif; then
            exit 1
          fi

      - name: Tag Docker image
        run: docker tag "daisukei-devcontainer-image:1.0" "ghcr.io/daisukei/daisukei-devcontainer-image:1.0"
  
      - name: Push Docker image to GitHub Packages
        run: docker push "ghcr.io/daisukei/daisukei-devcontainer-image:1.0"
