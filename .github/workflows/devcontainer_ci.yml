name: 'DevContainer CI' 
on: 
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout (GitHub)
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}


#      - name: Build and run dev container task
#        uses: devcontainers/ci@v0.3
#        id: simpletest
#        with:
#          imageName: ghcr.io/daisukei/example-devcontainer
#          subFolder: '.'
#          runCmd: sudo chmod 777 . || pytest --doctest-modules --junitxml=junit/test-results.xml --cov=./devcontainer-ci --cov-report=xml --cov-report=html || pwd || ls -alh
          #runCmd: sudo chmod 644 . || echo "Hello, World!" > sample.

      - name: runner - List all files and folders
        run: |
          sudo chmod g+w ./env
          mkdir .pytest_cache
          chmod g+w .pytest_cache
          ls -alh 

      - name: Install Devcontainer CLI
        run: |
          npm install -g @devcontainers/cli
          devcontainer --version
          printenv

      - name: Start Devcontainer
        run: |
          devcontainer build --workspace-folder ./env --push true --image-name ghcr.io/daisukei/example-devcontainer-image
          devcontainer up --workspace-folder ./env
      - name: Run Pytest in Devcontainer
        run: devcontainer exec --workspace-folder ./env pytest ../src/tests --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=. --cov-report=xml --cov-report=html

      - name: runner - List all files and folders
        run: |
          ls -l .pytest_cache
          ls -alh 
          
#      - name: mnt/output - List all files and folders
#        run: ls -alh /mnt/github/output
        
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  call-trivy-scan:
    uses: ./.github/workflows/template_trivy_scan.yml
    with:
      sourcePath: '.'
